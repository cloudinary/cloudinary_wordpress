<?php
/**
 * Data Component.
 *
 * @package Cloudinary
 */

namespace Cloudinary\UI\Component;

use Cloudinary\UI\Component;
use Cloudinary\Utils;
use function Cloudinary\get_plugin_instance;

/**
 * Data Component to hold data.
 *
 * @package Cloudinary\UI
 */
class Sizes extends Text {

	/**
	 * Holds the components build blueprint.
	 *
	 * @var string
	 */
	protected $blueprint = 'wrap|size/|preview/|/wrap';

	var $current_size = null;

	protected function wrap( $struct ) {
		$struct = parent::wrap( $struct );

		$struct['attributes']['class'][] = 'cld-sizes-preview';

		return $struct;

	}

	/**
	 * Filter the select size parts structure.
	 *
	 * @param array $struct The array structure.
	 *
	 * @return array
	 */
	protected function size( $struct ) {

		$new_struct                          = $this->get_part( 'div' );
		$new_struct['attributes']['class'][] = 'cld-size-items';
		$registered_sizes                    = Utils::get_registered_sizes();
		$this->setting->set_param( 'options', array_keys( $registered_sizes ) );

		foreach ( $registered_sizes as $size => $conf ) {
			$container                            = $this->get_part( 'div' );
			$container['attributes']['class'][]   = 'cld-size-items-item';
			$container['attributes']['data-size'] = $size;
			$container['content']                 = $size;
			$new_struct['children'][ $size ]      = $container;
		}

		return $new_struct;
	}

	public function get_value() {
		$value = parent::get_value(); // TODO: Change the autogenerated stub

		return isset( $value[ $this->current_size ] ) ? $value[ $this->current_size ] : '';
	}

	protected function control( $struct ) {
		$struct                          = parent::control( $struct ); // TODO: Change the autogenerated stub
		$struct['attributes']['class'][] = 'cld-input-on-off-control';

		//$struct['attributes']['class'][] = 'large';

		return $struct;
	}

	/**
	 * Filter the slider parts structure.
	 *
	 * @param array $struct The array structure.
	 *
	 * @return array
	 */
	protected function slider( $struct ) {
		$struct                          = parent::slider( $struct ); // TODO: Change the autogenerated stub
		$struct['attributes']['class'][] = 'cld-input-on-off-control-slider';

		return $struct;
	}

	/**
	 * Get the field name.
	 *
	 * @return string
	 */
	protected function get_name() {
		$name = parent::get_name();

		return $name . '[' . $this->current_size . ']';
	}

	/**
	 * Get the field name.
	 *
	 * @return string
	 */
	public function sget_id() {
		$id = parent::get_id();

		return $id . '-' . $this->current_size;
	}

	public function sanitize_value( $value ) {
		//vdump( $value );
		return $value;
	}

	public function preview( $struct ) {
		$struct['element']               = 'div';
		$struct['attributes']['class'][] = 'image-items';
		$registered_sizes                = Utils::get_registered_sizes();
		foreach ( $registered_sizes as $size => $config ) {
			$this->current_size                     = $size;
			$image_frame                            = $this->get_part( 'div' );
			$image_frame['attributes']['class'][]   = 'image-item';
			$image_frame['attributes']['data-size'] = $size;
			$image                                  = $this->make_preview( $size, $config );
			$image_frame['children']['image']       = $image;
			$image_frame['children']['input']       = $this->make_input( $size );
			$struct['children'][ $size ]            = $image_frame;
		}
		$this->current_size = null;

		return $struct;
	}

	public function make_preview( $size, $config ) {
		$struct                          = $this->get_part( 'div' );
		$struct['attributes']['class'][] = 'image-preview-box';
		$url                             = CLOUDINARY_ENDPOINTS_PREVIEW_IMAGE;
		$sample                          = '/fat_cat.jpg';
		$asset                           = Utils::get_sanitized_text( 'asset' );
		if ( ! empty( $asset ) ) {
			$media  = get_plugin_instance()->get_component( 'media' );
			$url    = $media->base_url . '/';
			$sample = '/' . $media->get_cloudinary_id( $asset );
		}
		$items = array();
		if ( ! empty( $config['width'] ) ) {
			$items['width'] = 'w_' . $config['width'];
		}
		if ( ! empty( $config['height'] ) ) {
			$items['height'] = 'h_' . $config['height'];
		}
		$value         = $this->get_value();
		$items['crop'] = 'c_fill'; // todo: add aspect ratio check.
		if ( ! empty( $value ) ) {
			$items['crop'] = $value;
		}
		$preview_src = $url . implode( ',', $items );

		$src                                          = $preview_src . $sample;
		$struct['render']                             = true;
		$struct['attributes']['style']                = 'background-image: url(' . $src . ');';
		$struct['attributes']['data-base']            = $url;
		$struct['attributes']['data-file']            = $sample;
		$struct['attributes']['data-transformations'] = wp_json_encode( $items );
		$struct['attributes']['data-size']            = $size;

		return $struct;
	}

	protected function make_input( $size ) {
		$struct                              = $this->get_part( 'input' );
		$struct['attributes']['type']        = 'text';
		$struct['attributes']['name']        = $this->get_name();
		$struct['attributes']['value']       = $this->get_value();
		$struct['attributes']['placeholder'] = 'g_auto';

		return $struct;
	}
}
